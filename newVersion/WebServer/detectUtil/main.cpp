#include <iostream>
#include "opencv2/opencv.hpp"
#include <fstream>
#include "paraType.h"
#include "DetectMark.h"
#include "base64.h"
using namespace cv;
using namespace std;

/// <summary>
/// 显示图片
/// </summary>
/// <param name="pImage"></param>
/// <param name="wName"></param>
/// <param name="waitTime"></param>
void CvWaitShowImage(cv::Mat mSrcImage)
{
    if (!mSrcImage.data)
        return;
    float factor = 0.5;
    char wName[100] = "window";
    namedWindow(wName, WINDOW_NORMAL);
    resizeWindow(wName, cv::Size(mSrcImage.rows * factor, mSrcImage.cols * factor));
    cv::imshow(wName, mSrcImage);
    waitKey(0);
    destroyWindow(wName);
}

//分解路径获取文件名
void string_replace(std::string &strBig, const std::string &strsrc, const std::string &strdst)
{
    std::string::size_type pos = 0;
    std::string::size_type srclen = strsrc.size();
    std::string::size_type dstlen = strdst.size();

    while ((pos = strBig.find(strsrc, pos)) != std::string::npos)
    {
        strBig.replace(pos, srclen, strdst);
        pos += dstlen;
    }
}

std::string GetPathOrURLShortName(std::string strFullName)
{
    if (strFullName.empty())
    {
        return "";
    }

    string_replace(strFullName, "/", "\\");

    std::string::size_type iPos = strFullName.find_last_of('\\') + 1;

    return strFullName.substr(iPos, strFullName.length() - iPos);
}



void test(){
    std::string base64img = "";
    std::string data = base64_decode(base64img);
    std::vector<uint8_t> buffer(data.begin(), data.end());
    cv::Mat img = cv::imdecode(buffer, cv::IMREAD_COLOR);  // 使用解码器解码字节流为图像
    cv::imshow("img",img);
    cv::waitKey(0);
}

#define _WRITE_IMAGE
int main()
{
    //test();
    getchar();
    DetectParameterV3 paraV3;
    DetectResultV3 resultV3;

    int nError = -100;
    //批量处理
    std::string pattern_jpg;
    std::vector<cv::String> image_files;
    std::vector<cv::String> saveimage_files;

    pattern_jpg = "/home/que/autoDetMark/testImage/";
    int nn = 0;
    cv::glob(pattern_jpg, image_files);
    double totaltime = 0;
    //fstream f;
    //f.open("data2.txt", ios::out);
    vector<string> filename;
    for (int i = 0; i < image_files.size(); ++i)
    {
        string shortName = pattern_jpg + GetPathOrURLShortName(image_files[i]);
        cout << shortName << endl;
        cv::Mat mShowImage = imread(shortName, 0);
        std::vector<cv::Mat> resBox;
        nError = AutoDetMark(mShowImage, &resultV3, resBox);
        for (int i = 0; i < resultV3.CircleCount; ++i)
        {
            for (int j = 0; j < resultV3.DetEveryResult[i].PartCount; j++)
            {
                //cout << "pc" << resultV3.DetEveryResult[i].PartCount << endl;
                if (resultV3.DetEveryResult[i].PartResult[j].ReserveCount)
                {
                    cv::Mat drawBoard = cv::Mat::zeros(mShowImage.cols, mShowImage.rows, CV_8UC1);

                    for (int k = 0; k < (resultV3.DetEveryResult[i].PartResult[j].ReserveCount - 1) / 2; k++)
                    {
                        cv::line(mShowImage, cv::Point(resultV3.DetEveryResult[i].PartResult[j].ReserveModel[2 * k], resultV3.DetEveryResult[i].PartResult[j].ReserveModel[2 * k + 1]),
                                 cv::Point(resultV3.DetEveryResult[i].PartResult[j].ReserveModel[2 * k + 2], resultV3.DetEveryResult[i].PartResult[j].ReserveModel[2 * k + 3]), cv::Scalar(128, 0, 0), 2, 8);
                    }
                    //CvWaitShowImage(drawBoard);
                }
                //circle(mShowImage, Point(resultV3.DetEveryResult[i].PartResult[j].CenterX, resultV3.DetEveryResult[i].PartResult[j].CenterY), 10, 255, 1);
                if (!resultV3.DetEveryResult[i].PartResult[j].Diameter)
                    resultV3.DetEveryResult[i].PartResult[j].Diameter = 10;
                circle(mShowImage, Point(resultV3.DetEveryResult[i].PartResult[j].CenterX, resultV3.DetEveryResult[i].PartResult[j].CenterY), resultV3.DetEveryResult[i].PartResult[j].Diameter / 2, 255, -1);
            }

            circle(mShowImage, Point(resultV3.DetEveryResult[i].CenterX, resultV3.DetEveryResult[i].CenterY), resultV3.DetEveryResult[i].Diameter / 2, 255, 1);
            // cv::imshow("img",mShowImage);
            // cv::waitKey(0);
        }
        // string shortName = GetPathOrURLShortName(image_files[i]);
        // string resultPath = string(cdetResultPath) + shortName.substr(0, shortName.size() - 4);
        // Mat mSrcImage = imread(image_files[i]);
        // cv::Mat mGrayImage;
        // cvtColor(mSrcImage, mGrayImage, CV_BGR2GRAY);
        // GrayBitmap* bitttt = MatToGrayBitmap(mGrayImage);
        // GrayBitmap* outData = CreateBitmap8U(bitttt->Width, bitttt->Height, 1);
        // std::vector<std::pair<cv::Mat, cv::Point3d>> detBoxResult;
        // double t1 = (double)cvGetTickCount();
        // memset(&resultV3, 0, sizeof(resultV3));

        // nError = AutoDetMark(bitttt, detectConfig, &resultV3);

        // char path[100] = "./res.xml";
        // double avgtime = 0;
        // cout << "ping平均时间" << avgtime / 10.0 << endl;
        // cv::Mat mShowImage;
        // mGrayImage.copyTo(mShowImage);
    }
    //f.close();

    for (auto name : filename)
    {
        cout << name << endl;
    }
    getchar();
    return 0;
}
